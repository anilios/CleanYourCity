{
  "_args": [
    [
      {
        "raw": "react-native-responsive-ui",
        "scope": null,
        "escapedName": "react-native-responsive-ui",
        "name": "react-native-responsive-ui",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/html/CleanCity"
    ]
  ],
  "_from": "react-native-responsive-ui@latest",
  "_id": "react-native-responsive-ui@1.1.1",
  "_inCache": true,
  "_location": "/react-native-responsive-ui",
  "_nodeVersion": "6.10.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-responsive-ui-1.1.1.tgz_1504684612152_0.27705334057100117"
  },
  "_npmUser": {
    "name": "wcandillon",
    "email": "wcandillon@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-responsive-ui",
    "scope": null,
    "escapedName": "react-native-responsive-ui",
    "name": "react-native-responsive-ui",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-responsive-ui/-/react-native-responsive-ui-1.1.1.tgz",
  "_shasum": "eb41839d4f3951ff025660185c36a9a9ce33759f",
  "_shrinkwrap": null,
  "_spec": "react-native-responsive-ui",
  "_where": "/var/www/html/CleanCity",
  "author": {
    "name": "William Candillon",
    "email": "wcandillon@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/wcandillon/react-native-responsive-ui/issues"
  },
  "dependencies": {
    "lodash": "^4.17.4"
  },
  "description": "Responsive UIs for React Native",
  "devDependencies": {
    "@expo/vector-icons": "^4.0.0",
    "autobind-decorator": "^1.4.1",
    "babel-eslint": "^7.2.3",
    "condition-circle": "^1.5.0",
    "eslint": "^3.19.0",
    "eslint-config-google": "^0.7.1",
    "eslint-plugin-flowtype": "^2.32.1",
    "eslint-plugin-react": "^6.10.3",
    "exp": "^40.0.2",
    "expo": "^16.0.0",
    "flow-bin": "^0.40.0",
    "jest-expo": "^0.4.0",
    "jest-junit-reporter": "^1.1.0",
    "react-native-scripts": "0.0.28",
    "react-navigation": "^1.0.0-beta.11",
    "react-test-renderer": "16.0.0-alpha.6",
    "semantic-release": "^6.3.6"
  },
  "directories": {},
  "dist": {
    "shasum": "eb41839d4f3951ff025660185c36a9a9ce33759f",
    "tarball": "https://registry.npmjs.org/react-native-responsive-ui/-/react-native-responsive-ui-1.1.1.tgz"
  },
  "gitHead": "cfa4af18d3923f2ddeba76ef041c8f0c5ea924f6",
  "homepage": "https://github.com/wcandillon/react-native-responsive-ui#readme",
  "jest": {
    "preset": "jest-expo",
    "transformIgnorePatterns": [
      "node_modules/(?!react-native|react-navigation|expo|@expo|native-base-shoutem-theme|@shoutem|react-clone-referenced-element)"
    ],
    "testResultsProcessor": "./node_modules/jest-junit-reporter"
  },
  "keywords": [
    "react",
    "react-native",
    "responsive",
    "responsive",
    "design",
    "media-query",
    "media"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "wcandillon",
      "email": "wcandillon@gmail.com"
    }
  ],
  "name": "react-native-responsive-ui",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "16.0.0-alpha.6",
    "react-native": "^0.43.4"
  },
  "readme": "# React Native Reponsive UI\n\n[![CircleCI](https://circleci.com/gh/wcandillon/react-native-responsive-ui.svg?style=svg)](https://circleci.com/gh/wcandillon/react-native-responsive-ui)\n[![npm version](https://badge.fury.io/js/react-native-responsive-ui.svg)](https://badge.fury.io/js/react-native-responsive-ui)\n\n\nBuilding responsive UIs in React Native.\n\n![example](https://raw.githubusercontent.com/wcandillon/react-native-responsive-ui/4637085802323386110a6352929147d11e1ca83c/example/components/images/example.gif)\n\nAn example is available via expo [here](https://expo.io/@wcandillon/react-native-responsive-ui).\n\n## What about existing packages?\n\n* [react-native-responsive](https://github.com/adbayb/react-native-responsive): This library provides interesting APIs but it doesn't listen to changes in the app window.\nThis is problematic when changing the orientation of the device or when splitting screens.\n\n* [react-native-responsive-styles](https://github.com/FormidableLabs/react-native-responsive-styles): This is a great library but it contains a native depency which prevents you to use it with expo for instance.\n\n## Installation\n\n```bash\nnpm install react-native-responsive-ui --save\n```\n\n## Usage\n\nThe `MediaQuery` component renders its children only if the query evaluates to true (see list of properties below).\nThis component listens to changes in the window dimensions.\nIn the example below, we render the `Logo` component if the window's height has a minimum size of `450dp` and if the device orientation is in portrait mode (height is larger than width).\n\n### Media Queries\n\n```jsx\n// @flow\nimport React, {Component} from \"react\";\nimport {View} from \"react-native\";\nimport {MediaQuery} from \"react-native-responsive-ui\";\n\nexport default class Login extends Component {\n    render(): React$Element<*> {\n        return <View>\n            <MediaQuery minHeight={450} orientation=\"portrait\">\n                <Logo />\n            </MediaQuery>\n        </View>;\n    }\n}\n\n```\n\n#### Properties\n\n| Name           | Type   | Description                                                                          |\n|----------------|--------|--------------------------------------------------------------------------------------|\n| minHeight      | dp     | Minimum height of the window.                                                        |\n| maxHeight      | dp     | Maximum height of the window.                                                        |\n| minWidth       | dp     | Minimum width of the window.                                                         |\n| maxHeight      | dp     | Maximum height of the window.                                                        |\n| minAspectRatio | number | Minimum aspect ration of the window (ratio of horizontal pixels to vertical pixels). |\n| maxAspectRatio | number | Maximum aspect ration of the window (ratio of horizontal pixels to vertical pixels). |\n| minPixelRatio  | number | Minimum device pixel density. See [PixelRatio](https://facebook.github.io/react-native/docs/pixelratio.html). |\n| maxPixelRatio  | number | Maximum device pixel density. See [PixelRatio](https://facebook.github.io/react-native/docs/pixelratio.html). |\n| orientation    | `portrait` or `landspace` | Indicates whether the viewport is in landscape (the display is wider than it is tall) or portrait (the display is square or taller than it is wide) mode. |\n| platform       | string | Platform of the device.  See [Platform](https://facebook.github.io/react-native/docs/platform-specific-code.html#platform-module). |\n| condition      | boolean | Abritrary boolean value that must be true for the media query to pass. |\n\n\n### Responsive Annotation\n\nYou can use es7 annotation in order to listen for dimension changes in a React component.\n\n```jsx\nimport React from \"react\";\nimport {responsive} from \"react-native-responsive-ui\";\n\n@responsive\nexport default class Debug extends React.Component {\n    render() {\n        const {width, height} = this.props.window;\n        console.log(`New window dimensions: ${width}x${height}`);\n        return null;\n    }\n}\n```\n\nOr without the decorator syntax:\n\n```jsx\nimport React from \"react\";\nimport {responsive} from \"react-native-responsive-ui\";\n\nclass Debug extends React.Component {\n    render() {\n        const {width, height} = this.state.window;\n        console.log(`New window dimensions: ${width}x${height}`);\n        return null;\n    }\n}\n\nexport default responsive(Debug);\n```\n\n\n### ResponsiveStyleSheet\n\n`ResponsiveStyleSheet` returns a stylesheet given multiple media queries.\nUnlike `Stylesheet` from React Native, you need to invoke this method from the `render()` method since it will be invoked for each dimension change.\nIn order to re-render the component for each dimension change, you need to extends `ResponsiveComponent`.\nSee example below.\n\n```jsx\nimport React from \"react\";\nimport {ResponsiveComponent, ResponsiveStyleSheet} from \"react-native-responsive-ui\";\n\nexport default class Buttons extends ResponsiveComponent {\n    render() {\n        const {style} = this;\n        return <View style={style.btns}>\n            <Button label=\"Login\" primary style={style.btn} />\n            <Button label=\"Sign Up\" style={style.btn} />\n        </View>;\n    }\n    \n    get style() {\n        return ResponsiveStyleSheet.select([\n        {\n            query: { orientation: \"landscape\" },\n            style: {\n                btns: {\n                    flexDirection: \"row\"\n                },\n                btn: {\n                    flex: 1\n                }\n            }\n        },\n        {\n            query: { orientation: \"portrait\" },\n            style: {\n                btns: {\n                    alignSelf: \"stretch\"\n                },\n                btn: {\n                    flex: 0\n                }\n            }\n        }\n        ]);\n    }\n}\n```\n\n### MediaQuerySelector\n\n`MediaQuerySelector` evaluates a media query and return true or false.\nSee example below.\n\n```jsx\nimport {Device, MediaQuerySelector} from \"react-native-responsive-ui\";\n\nconst {width, height} = Device.dimensions.window;\nMediaQuerySelector.query({ orientation: \"portrait\", minHeight: 450 }, width, height)\n```\n\n\n### ResponsiveComponent\n\n`ResponsiveComponents` extends `React.Component` and add the window dimensions to the state of the component.\n\n```jsx\nimport React from \"react\";\nimport {ResponsiveComponent} from \"react-native-responsive-ui\";\n\nexport default class Debug extends ResponsiveComponent {\n    render() {\n        const {width, height} = this.state.window;\n        console.log(`New window dimensions: ${width}x${height}`);\n        return null;\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "release": {
    "verifyConditions": "condition-circle"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wcandillon/react-native-responsive-ui.git"
  },
  "scripts": {
    "android": "react-native-scripts android",
    "eject": "react-native-scripts eject",
    "flow": "flow",
    "ios": "react-native-scripts ios",
    "lint": "eslint App.js App.test.js example/ lib/",
    "release": "semantic-release pre && npm publish && semantic-release post",
    "start": "react-native-scripts start",
    "test": "node node_modules/jest/bin/jest.js",
    "test:watch": "node node_modules/jest/bin/jest.js --watch"
  },
  "version": "1.1.1"
}

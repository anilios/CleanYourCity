{
  "_args": [
    [
      {
        "raw": "react-native-redux-routing",
        "scope": null,
        "escapedName": "react-native-redux-routing",
        "name": "react-native-redux-routing",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/html/CleanCity"
    ]
  ],
  "_from": "react-native-redux-routing@latest",
  "_id": "react-native-redux-routing@1.2.7",
  "_inCache": true,
  "_location": "/react-native-redux-routing",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-native-redux-routing-1.2.7.tgz_1474711548162_0.1503300026524812"
  },
  "_npmUser": {
    "name": "nodegin",
    "email": "10@nodeg.in"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-redux-routing",
    "scope": null,
    "escapedName": "react-native-redux-routing",
    "name": "react-native-redux-routing",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-redux-routing/-/react-native-redux-routing-1.2.7.tgz",
  "_shasum": "13eaa4b1627f6ab9da448733b5ab51c351e52041",
  "_shrinkwrap": null,
  "_spec": "react-native-redux-routing",
  "_where": "/var/www/html/CleanCity",
  "author": {
    "name": "nodegin"
  },
  "bugs": {
    "url": "https://github.com/nodegin/react-native-redux-routing/issues"
  },
  "dependencies": {
    "react-native-drawer-layout": "1.x"
  },
  "description": "Universal routing module for iOS / Android, designed for Redux based React Native applications.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "13eaa4b1627f6ab9da448733b5ab51c351e52041",
    "tarball": "https://registry.npmjs.org/react-native-redux-routing/-/react-native-redux-routing-1.2.7.tgz"
  },
  "gitHead": "b989e1e0bfd8adfb007116f3233308e715f08d0f",
  "homepage": "https://github.com/nodegin/react-native-redux-routing#readme",
  "keywords": [
    "react-native",
    "redux",
    "router",
    "routing"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "nodegin",
      "email": "10@nodeg.in"
    }
  ],
  "name": "react-native-redux-routing",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.3.1",
    "react-native": "^0.34.0"
  },
  "readme": "# react-native-redux-routing <sup>v1.2.7</sup>\n\n[![npm](https://img.shields.io/npm/v/react-native-redux-routing.svg?maxAge=2592000)](https://www.npmjs.com/package/react-native-redux-routing)\n[![changelog](https://img.shields.io/badge/view-changelog-9575CD.svg?maxAge=2592000)](https://github.com/nodegin/react-native-redux-routing/wiki/Changelog)\n\nAn exquisitely crafted routing component for Redux based React Native applications.\n\nProviding a consistent user interface for both iOS and Android.\n\n![](https://cloud.githubusercontent.com/assets/8536244/17709163/a7a35d32-641a-11e6-9047-7e2fdd05db72.png)\n\n## Install\n\n`npm install -S react-native-redux-routing`\n\n## Getting Started\n\nYour `Application.js` should looks like below:\n\n```jsx\nimport React from 'react'\nimport { Platform } from 'react-native'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport {\n  actions as routerActions,\n  Router,\n  Route\n} from 'react-native-redux-routing'\n\nimport * as actionsA from './actions/actionsA'\nimport * as actionsB from './actions/actionsB'\n\nimport { SplashPage, MainPage } from './pages'\n\nimport ExtraDimensions from 'react-native-extra-dimensions-android'\n\nexport default connect(\n  state => ({\n    router: state.router,\n    a: state.a,\n    b: state.b,\n  }),\n  dispatch => ({\n    actions: bindActionCreators({\n      ...routerActions,\n      ...actionsA,\n      ...actionsB,\n    }, dispatch),\n  })\n)(class extends React.Component {\n\n  render() {\n    const statusBarSize = Platform.OS === 'ios' ? 20 : Platform.Version >= 23 ? ExtraDimensions.get('STATUS_BAR_HEIGHT') : 0\n    const config = {\n      renderNavigationView: () => <NavigationDrawer />,\n      accentColor: '#C2185B',\n      transparentStatusBar: true,\n      statusBarStyle: 'light-content',\n      statusBarSize // You have to specify the size of status bar manually\n    }\n    return (\n      <Router {...this.props} config={config} initialRoute=\"splash\">\n        <Route id=\"splash\" component={SplashPage} immersive={true} />\n        <Route id=\"main\" component={MainPage} />\n      </Router>\n    )\n  }\n\n})\n```\n\n## Component Properties\n\n#### For the `<Router/>` element:\n\nYou must set the `initialRoute` property to get the router working.\n\nYou can set the `config` property to pass in your custom configurations.\n\n#### For the `<Route/>` element:\n\nYou must set the `id` property which is unique to each route.\n\nYou must set the `component` property for which class should be rendered.\n\nYou can set the `immersive` property to true to hide the app bar (including navigation drawer).\n\n\n## State Properties\n\n- `this.props.router.drawerOpen`\n- `this.props.router.navTitle`\n- `this.props.router.data`\n- `this.props.router.routes`\n- `this.props.router.appBarSize`\n- `this.props.router.transitioning`\n\n\n## API\n\nAll router-provided actions starts with an underscore in order to prevent possible conflictions.\n\n#### `this.props.actions._navigate(routeId, options = {})`\n\n```jsx\nthis.props.actions._navigate('settings') // Push the \"settings\" route to the routes stack\nthis.props.actions._navigate(-1) // Pop the last route in the routes stack\nthis.props.actions._navigate('home', { reset: true }) // Reset the routes stack and navigate to \"home\" route\nthis.props.actions._navigate('page-1', { sceneConfig: CustomConfig }) // Changing scene with custom animation\nthis.props.actions._navigate('page-2', { animated: false }) // Changing scene without animation\nthis.props.actions._navigate('another', { replace: true }) // Replace the current scene to new scene\nthis.props.actions._navigate('analytics', { data: someObject }) // Move to another scene and transferring data to it\n```\n\n#### `this.props.actions._setNavAction(action = { renderer, handler })`\n\n```jsx\nthis.props.actions._setNavAction({\n  renderer: () => <Text>123</Text>, // Function that returns a React element\n  handler: () => alert('clicked'), // Function that will triggers when the rendered element was pressed\n})\nthis.props.actions._setNavAction(null) // Reset nav action\n```\n\n#### `this.props.actions._setNavTitle(title)`\n\n```jsx\nthis.props.actions._setNavTitle('Page Title #' + 1) // Set the page title that shows on the app bar\n```\n\n#### `this.props.actions._openDrawer()`\n\n```jsx\nthis.props.actions._openDrawer() // Open the navigation drawer\n```\n\n#### `this.props.actions._closeDrawer()`\n\n```jsx\nthis.props.actions._closeDrawer() // Close the navigation drawer\n```\n\n#### `this.props.actions._addRouteListener(type, listener)`\n\n```jsx\nthis.props.actions._addRouteListener('unload', () => 'Are you sure?') // Attach an `onUnload` listener for the current route\nthis.props.actions._addRouteListener('focus', () => 'Entered scene') // Attach an `onFocus` listener for the current route\nthis.props.actions._addRouteListener('blur', () => 'Leaved scene') // Attach an `onBlur` listener for the current route\n```\n\n#### `this.props.actions._removeRouteListener(listener)`\n\n```jsx\nthis.props.actions._removeRouteListener('unload', listener) // `listener` must be the same one as you added to remove\nthis.props.actions._removeRouteListener('focus', listener) // `listener` must be the same one as you added to remove\nthis.props.actions._removeRouteListener('blur', listener) // `listener` must be the same one as you added to remove\n```\n\nThe dispatchable actions are listed below:\n\n```jsx\nimport { types as routerTypes } from 'react-native-redux-routing'\n\ndispatch({\n  type: routerTypes.ROUTE_PUSH,\n  options: {\n    route: 'settings',\n    sceneConfig: CustomConfig,\n  }\n})\n\ndispatch({\n  type: routerTypes.ROUTE_POP,\n  options: {\n    sceneConfig: CustomConfig,\n  }\n})\n\ndispatch({\n  type: routerTypes.ROUTE_REPLACE,\n  options: {\n    route: 'another',\n    sceneConfig: CustomConfig,\n  }\n})\n\ndispatch({\n  type: routerTypes.ROUTE_RESET,\n  options: {\n    route: 'settings',\n    animated: false,\n  }\n})\n\ndispatch({\n  type: routerTypes.SET_NAV_ACTION,\n  renderer: rendererFunc,\n  handler: handlerFunc,\n})\n\ndispatch({\n  type: routerTypes.SET_NAV_TITLE,\n  title: 'New Title',\n})\n\ndispatch({\n  type: routerTypes.OPEN_DRAWER,\n})\n\ndispatch({\n  type: routerTypes.CLOSE_DRAWER,\n})\n\ndispatch({\n  type: routerTypes.ADD_BLUR_LISTENER,\n  listener,\n})\n\ndispatch({\n  type: routerTypes.REMOVE_BLUR_LISTENER,\n  listener,\n})\n\ndispatch({\n  type: routerTypes.ADD_FOCUS_LISTENER,\n  listener,\n})\n\ndispatch({\n  type: routerTypes.REMOVE_FOCUS_LISTENER,\n  listener,\n})\n\ndispatch({\n  type: routerTypes.ADD_UNLOAD_LISTENER,\n  listener,\n})\n\ndispatch({\n  type: routerTypes.REMOVE_UNLOAD_LISTENER,\n  listener,\n})\n```\n\n## Configurations\n\nYou can modify the default configuration for the router by passing `config` property into its properties.\n\nThe default configuration are listed below:\n\n```jsx\nconst defaultConfig = {\n  renderNavigationView: () => null,\n  accentColor: '#E0E0E0',\n  transparentStatusBar: true,\n  statusBarStyle: 'default',\n  statusBarSize: 20,\n}\n```\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Type</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>renderNavigationView</td>\n    <td>Function</td>\n    <td>Function that returns a React element.</td>\n  </tr>\n  <tr>\n    <td>accentColor</td>\n    <td>String</td>\n    <td>\n      Sets the accent color of the application,<br>\n      must be a solid color starting with #.\n    </td>\n  </tr>\n  <tr>\n    <td>transparentStatusBar</td>\n    <td>Boolean</td>\n    <td>\n      Indicates the status bar should be transparent. Android only.\n    </td>\n  </tr>\n  <tr>\n    <td>statusBarStyle</td>\n    <td>String</td>\n    <td>\n      Indicates the theme should be dark or light.<br>\n      Enum: \"default\", \"light-content\"\n    </td>\n  </tr>\n  <tr>\n    <td>statusBarSize</td>\n    <td>Number</td>\n    <td>\n      Specify the size of the status bar.<br>\n      Obtain yourself from other modules.\n    </td>\n  </tr>\n</table>\n\n\n## Setting up navigation drawer\n\nThe drawer layout uses [react-native-drawer-layout](https://github.com/iodine/react-native-drawer-layout) module, you can setup your own navigation drawer view renderer by setting `renderNavigationView` property in the router config object.\n\n```jsx\nrender() {\n  const config = {\n    statusBarStyle: 'light-content',\n    renderNavigationView: () => <NavigationDrawer />,\n    accentColor: '#00695C',\n  }\n  return (\n    <Router {...this.props} config={config} initialRoute=\"calendar\">\n      ...\n    </Router>\n  )\n}\n```\n\n![](https://cloud.githubusercontent.com/assets/8536244/17712112/26ece3b8-6427-11e6-94e2-bc63cc3eb726.png)\n\n## Adding navigation action dynamically\n\nThe example below shows how to adding a camera button dynamically:\n\n```jsx\ncomponentWillMount() {\n  this.props.actions._setNavTitle('Camera Roll')\n  this.props.actions._setNavAction({\n    renderer: () => (\n      <View style={{ alignItems: 'center', flexDirection: 'row' }}>\n        <Icon name='camera-alt' style={{ color: '#fff', fontSize: 24 }} />\n      </View>\n    ),\n    handler: () => {\n      const date = new Date\n      alert('Today is ' + date.toString())\n    }\n  })\n}\n```\n\n![](https://cloud.githubusercontent.com/assets/8536244/17747581/0342c128-64e8-11e6-8158-1a1f410a71a8.png)\n\n## Listening route focus / blur event\n\n```jsx\nclass extends React.Component {\n  ...\n\n  componentDidMount() {\n    this.onSceneFocusListener = () => alert('This component is now focused from route stack!')\n    this.onSceneBlurListener = () => alert('This component is now blurred from route stack!')\n    this.props.actions._addRouteListener('focus', this.onSceneFocusListener)\n    this.props.actions._addRouteListener('blur', this.onSceneBlurListener)\n  }\n\n  componentWillUnmount() {\n    this.props.actions._removeRouteListener('focus', this.onSceneFocusListener)\n    this.props.actions._removeRouteListener('blur', this.onSceneBlurListener)\n    // Alert message will not be shown again from now on\n  }\n\n  ...\n}\n```\n\n## Confirm leaving route\n\n```jsx\nclass extends React.Component {\n  ...\n\n  state = { apples: 10 }\n\n  componentDidMount() {\n    this.onUnloadListener = () => {\n      if (this.state.apples > 0) {\n        return 'Are you sure you want to leave your apples?'\n      }\n      // returning null will not prompt for confirmation\n      return null\n    }\n    this.props.actions._addRouteListener('unload', this.onUnloadListener)\n  }\n\n  componentWillUnmount() {\n    this.props.actions._removeRouteListener('unload', this.onUnloadListener)\n    // Unload listener has been removed\n  }\n\n  ...\n}\n```\n\n## Theming\n\nYou can theme your application easily by setting the `accentColor` property in the router config object.\n\nThe default value of `statusBarStyle` is `\"default\"` which indicates a light theme, change it to `\"light-content\"` for dark theme.\n\n![](https://cloud.githubusercontent.com/assets/8536244/17713024/5d4cb15a-642b-11e6-973c-36824572d690.png)\n\n## Credits\n\nThanks to [react-native-drawer-layout](https://github.com/iodine/react-native-drawer-layout) and [react-native-router-redux](https://github.com/Qwikly/react-native-router-redux) for their awesome work.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nodegin/react-native-redux-routing.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.2.7"
}
